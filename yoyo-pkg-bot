#!/bin/bash
#
# Copyright (c) 2022 YoyoOS packaging team
#
# This file is part of yoyo-packaging-bot
#
# This script is free software; you can redistribute it and/or
# modify it under the terms of the  GNU AFFERO GENERAL PUBLIC LICENSE Version 3
# as published by the Free Software Foundation and appearing in the file LICENSE
# included in the packaging of this file.
#

set -e

LC_ALL=C

SCRIPT_DIR=$(cd $(dirname $0); pwd)
TMP_DIR=/tmp/yoyo-pkg-bot
SRV_DIR=/srv/yoyo-pkg-bot

uid=$(id -u)
if [ ${uid} -ne 0 ]; then
        echo uid is $uid, are you root?
        exit 1
fi

[ -d ${TMP_DIR} ] || mkdir ${TMP_DIR} -m 700
[ -d ${TMP_DIR}/cache ] && rm -rf ${TMP_DIR}/cache
[ -d ${SRV_DIR}/cache ] && rm -rf ${SRV_DIR}/cache
mkdir ${TMP_DIR}/cache
mkdir ${SRV_DIR}/cache
[ -d ${TMP_DIR}/backup ] || mkdir ${TMP_DIR}/backup
[ -d ${TMP_DIR}/repos ] || mkdir ${TMP_DIR}/repos
# ${SRV_DIR} will store built packages
[ -d ${SRV_DIR} ] || mkdir ${SRV_DIR}

. ${SCRIPT_DIR}/config/config
[ -f ${SCRIPT_DIR}/config/config_usr ] && . ${SCRIPT_DIR}/config/config_usr

[ -n "${BOT_DEBUG}" ] && echo "Debug enabled"

if [ "${GITHUB_KEY}" == "" ]; then echo No github key; exit 1; fi
if [ "${GITHUB_SSHKEY}" == "" ]; then echo No github ssh key; exit 1; fi
if [ "${BUILD_ARCH}" == "" ]; then echo No build arch; exit 1; fi
# check remote
SCP_REMOTE=
if [ -n "${SCP_ENABLE}" ]; then
	if [ -z "${SCP_KEY_FILE}" ]; then echo No ssh key set; exit 1; fi
	if [ ! -f "${SCP_KEY_FILE}" ]; then echo No such file: ${SCP_KEY_FILE}; exit 1; fi
	if [ -z "${SCP_PORT}" ]; then SCP_PORT="22"; echo Use default ssh port 22; fi
	if [ -z "${SCP_HOST}" ]; then echo No scp host set; exit 1; fi
	if [ -z "${SCP_PREFIX}" ]; then SCP_PREFIX="/"; fi
	SCP_REMOTE="${SCP_USER}@${SCP_HOST}:${SCP_PREFIX}"
	echo packages will be sent to ${SCP_REMOTE} port ${SCP_PORT}
else
	echo "scp disabled"
fi
# check config/repos
if [ "$(cat ${SCRIPT_DIR}/config/repos)" == "" ]; then echo No package signed; exit 1; fi

. ${SCRIPT_DIR}/functions/logging
. ${SCRIPT_DIR}/functions/github
. ${SCRIPT_DIR}/functions/build

bot_log i "setup" "YoyoOS packageing bot is running"

while true; do
cat ${SCRIPT_DIR}/config/repos | while read line; do
	cd ${SCRIPT_DIR}
	# user repo branch
	# echo $line
	if [ "${line}" == "" ]; then continue; fi
	new_tag=$(github_fresh_tag ${line})
	new_commit=
	repo_name=$(echo ${line} | cut -f 2 -d ' ')
	if [ "${new_tag}" != "" ]; then
		bot_log i "new tag" "${line} ${new_tag}"
		if ! github_clone ${line} ${new_tag}; then
			github_failed_tag ${line} ${new_tag}; continue; fi
		if ! debian_build ${TMP_DIR}/repos/${repo_name}; then
			github_failed_tag ${line} ${new_tag}; continue; fi
		if ! ubuntu_build ${TMP_DIR}/repos/${repo_name}; then
			github_failed_tag ${line} ${new_tag}; continue; fi
	elif [ "${new_commit}" != "" ]; then
		bot_log i "new commit" "${line} - ${new_commit}"
		github_clone ${line} ${new_commit}
	fi
	github_clean ${line}
done
bot_log d "setup" "Scan finished $?"
sleep 5m # 5mins
done

