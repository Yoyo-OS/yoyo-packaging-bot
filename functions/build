#!/bin/bash

set -e

. ${SCRIPT_DIR}/functions/logging

# build tarball with debootstrap
# parameter: suite mirror tarball_path
debootstrap_pack() {
	local old_dir
	[ -d ${TMP_DIR}/cache/bootstrap ] && rm -rf ${TMP_DIR}/cache/bootstrap
	old_dir=$(pwd)
	mkdir ${TMP_DIR}/cache/bootstrap
	cd ${TMP_DIR}/cache/bootstrap
	# debootstrap
	debootstrap --arch=${BUILD_ARCH} $1 . $2
	# tarball
	bot_log i "new tarball" "new $1 ${BUILD_ARCH} tarball on $3"
	tar --numeric-owner -zcpf $3 .
	# clean
	rm -rf ${TMP_DIR}/cache/bootstrap
	cd ${old_dir}
}

# extract chroot
# parameter: tarball_path
debootstrap_unpack() {
	local old_dir
	old_dir=$(pwd)
	if [ -d ${TMP_DIR}/cache/chroot ]; then
		bot_log e "chroot error" "${TMP_DIR}/cache/chroot exists, please check and remove it"
		return 1;
	fi
	mkdir ${TMP_DIR}/cache/chroot
	cd ${TMP_DIR}/cache/chroot
	bot_log d "unpack" "extract tarball $1"
	tar --numeric-owner -zxpf $1
}

# schroot prepare
# copy git repo and build script
# check schroot configuration
# parameter: tarball_path repo_dir script_path
schroot_prepare() {
	debootstrap_unpack $1
	# configure schroot
	if [ ! -d /etc/schroot/yoyo-pkg-bot ]; then
		bot_log d "schroot configure" "use default schroot configuration"
		mkdir /etc/schroot/yoyo-pkg-bot
		cat >/etc/schroot/yoyo-pkg-bot/fstab <<EOF
# automatically generated by YoyoOS packaging bot
# <file system> <mount point>   <type>  <options>       <dump>  <pass>
/proc           /proc           none    rw,bind         0       0
/sys            /sys            none    rw,bind         0       0
/dev            /dev            none    rw,bind         0       0
/dev/pts        /dev/pts        none    rw,bind         0       0
/tmp            /tmp            none    rw,bind         0       0
EOF
		cat >/etc/schroot/yoyo-pkg-bot/copyfiles <<EOF
# automatically generated by YoyoOS packaging bot
/etc/resolv.conf
EOF
		cat >/etc/schroot/yoyo-pkg-bot/nssdatabases <<EOF
# automatically generated by YoyoOS packaging bot
EOF
	fi
	if [ ! -f /etc/schroot/chroot.d/yoyo-pkg-bot-chroot ]; then
		bot_log d "schroot distro" "configure default schroot distro name"
		cat >/etc/schroot/chroot.d/yoyo-pkg-bot-chroot <<EOF
[yoyo-pkg-bot-chroot]
type=directory
description=YoyoOS packaging bot autobuilder
directory=${TMP_DIR}/cache/chroot
root-users=root
root-groups=root
profile=yoyo-pkg-bot
preserve-environment=true
EOF
	fi

	# copy repo
	cp -r $2 ${TMP_DIR}/cache/chroot/root/
	# copy script
	cp $3 ${TMP_DIR}/cache/chroot/root/build.sh
	chmod +x ${TMP_DIR}/cache/chroot/root/build.sh
}

# build with schroot
# run <chroot dir>/root/build.sh
# output packages should be placed under ${repo_dir}
# parameter: repo_dir
schroot_build() {
	schroot -c yoyo-pkg-bot-chroot -u root -d /root /root/build.sh $1
}

# clean schroot environment
schroot_clean() {
	rm -r ${TMP_DIR}/cache/chroot
}


# build debian package
# parameter: repo_path
debian_build() {
if [ "${DEBIAN_VERSION}" != "" ]; then
	local tarball_name tarball_path output_path package_path
	bot_log d "build" "call debian build function"

	[ -d ${SRV_DIR}/tarballs ] || mkdir ${SRV_DIR}/tarballs
	tarball_name=debian_${DEBIAN_VERSION}_${BUILD_ARCH}_$(date -u +%Y%m%d).tar.gz
	tarball_path=${SRV_DIR}/tarballs/${tarball_name}
	if [ ! -f ${tarball_path} ]; then
		# delete old tarball and build new tarball
		rm -f debian_$1_${BUILD_ARCH}_*.tar.gz
		debootstrap_pack ${DEBIAN_VERSION} ${DEBIAN_MIRROR} ${tarball_path}
	fi

	output_path=${TMP_DIR}/backup/debian_debs/$(basename $1)
	package_path=${SRV_DIR}/debian_debs/$(basename $1)
	cat >${TMP_DIR}/cache/debian_build.sh <<EOF
#!/bin/bash

set -e

export HOME=/root
export LC_ALL=C

apt-get update -qq -y
apt-get upgrade -qq -y
apt-get install -qq -y equivs curl git devscripts lintian build-essential automake autotools-dev cmake g++

cd $(basename $1)
mk-build-deps -i -t "apt-get -qq --yes" -r
dpkg-buildpackage -b -uc -us -j$(nproc)
cd ..
cp -v *.deb ${output_path}
EOF
	bot_log d "schroot" "prepare ${DEBIAN_VERSION} schroot"
	schroot_prepare ${tarball_path} $1 ${TMP_DIR}/cache/debian_build.sh
	rm ${TMP_DIR}/cache/debian_build.sh
	[ -d ${output_path} ] || mkdir -p ${output_path}
	rm -f ${output_path}/*
	bot_log d "schroot" "build $(basename $1) debian packages"
	schroot_build ${output_path}
	schroot_clean

	[ -d ${package_path} ] || mkdir -p ${package_path}
	rm -f ${package_path}/*
	cp -v ${output_path}/*.* ${package_path}
	rm -r ${output_path}

	bot_log i "build secceed" "$(basename $1) debian ${DEBIAN_VERSION} ${BUILD_ARCH} packages"
fi
}

ubuntu_build() {
if [ "${UBUNTU_VERSION}" != "" ]; then
	local tarball_name tarball_path output_path package_path
	bot_log d "build" "call ubuntu build function"

	[ -d ${SRV_DIR}/tarballs ] || mkdir ${SRV_DIR}/tarballs
	tarball_name=ubuntu_${UBUNTU_VERSION}_${BUILD_ARCH}_$(date -u +%Y%m%d).tar.gz
	tarball_path=${SRV_DIR}/tarballs/${tarball_name}
	if [ ! -f ${tarball_path} ]; then
		# delete old tarball and build new tarball
		rm -f ubuntu_$1_${BUILD_ARCH}_*.tar.gz
		debootstrap_pack ${UBUNTU_VERSION} ${UBUNTU_MIRROR} ${tarball_path}
	fi

	output_path=${TMP_DIR}/backup/ubuntu_debs/$(basename $1)
	package_path=${SRV_DIR}/ubuntu_debs/$(basename $1)
	cat >${TMP_DIR}/cache/ubuntu_build.sh <<EOF
#!/bin/bash

set -e

export HOME=/root
export LC_ALL=C

# edit sources.list
cat >/etc/apt/sources.list <<EOFF
deb ${UBUNTU_MIRROR} ${UBUNTU_VERSION} main universe
EOFF

apt-get update -qq -y
apt-get upgrade -qq -y
apt-get install -qq -y equivs curl git devscripts lintian build-essential automake autotools-dev cmake g++

cd $(basename $1)
mk-build-deps -i -t "apt-get -qq --yes" -r
dpkg-buildpackage -b -uc -us -j$(nproc)
cd ..
cp -v *.deb $1
cp -v *.ddeb $1
EOF
	bot_log d "schroot" "prepare ${UBUNTU_VERSION} schroot"
	schroot_prepare ${tarball_path} $1 ${TMP_DIR}/cache/ubuntu_build.sh
	rm ${TMP_DIR}/cache/ubuntu_build.sh
	[ -d ${output_path} ] || mkdir -p ${output_path}
	rm -f ${output_path}/*
	bot_log d "schroot" "build $(basename $1) ubuntu packages"
	schroot_build ${output_path}
	schroot_clean

	[ -d ${package_path} ] || mkdir -p ${package_path}
	rm -f ${package_path}/*
	cp -v ${output_path}/*.* ${package_path}
	rm -r ${output_path}

	bot_log i "build secceed" "$(basename $1) ubuntu ${UBUNTU_VERSION} ${BUILD_ARCH} packages"
fi
}


