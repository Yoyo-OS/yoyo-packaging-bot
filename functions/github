#!/bin/bash

set -e

# github tags
# parameter: user repo
github_get_tags() {
	echo $(curl -s -X GET \
		-H "Accept: application/vnd.github.v3+json" \
		-H "Authorization: token ${GITHUB_KEY}" \
		https://api.github.com/repos/$1/$2/tags)
}

# github new tag
# parameter: user repo branch
github_fresh_tag() {
	local tags new_tag old_tag
	
	tags=$(github_get_tags $1 $2)
	[ -d ${SRV_DIR}/github ] || mkdir ${SRV_DIR}/github
	touch ${SRV_DIR}/github/tags
	touch ${SRV_DIR}/github/failed_tags

	# jq will return "null" if there is no tag
	new_tag=$(echo ${tags} | jq -r ".[] | .name" | sort -r | head -n1)
	old_tag=$(grep "^$1 $2 $3" ${SRV_DIR}/github/tags | cut -f 4 -d ' ')
	if [ "${new_tag}" != "null" ] && [ "${new_tag}" != "" ]; then
	if [ "${new_tag}" != "${old_tag}" ]; then
		echo ${new_tag}
		if [ -n "${old_tag}" ]; then
			sed -i "s/^$1 $2 $3 ${old_tag}$/$1 $2 $3 ${new_tag}/" ${SRV_DIR}/github/tags
		else
			echo $1 $2 $3 ${new_tag} >> ${SRV_DIR}/github/tags
		fi
	elif [ "$(grep "^$1 $2 $3 ${old_tag}$" ${SRV_DIR}/github/failed_tags)" != "" ]; then
		# retry failed tag
		echo ${old_tag}
		sed -i '/^$/d' ${SRV_DIR}/github/failed_tags
		sed -i "s/^$1 $2 $3 .*//" ${SRV_DIR}/github/failed_tags
	fi
	fi
}

# github build fail function
# parameter: user repo branch tag
github_failed_tag() {
	# delete empty or duplicate lines
	sed -i '/^$/d' ${SRV_DIR}/github/failed_tags
	sed -i "s/^$1 $2 $3 .*//" ${SRV_DIR}/github/failed_tags
	# add new failed tag line
	echo $1 $2 $3 $4 >> ${SRV_DIR}/github/failed_tags
	# clean local repo
	github_clean $1 $2
}

# github clone repo
# do NOT forget to configure your key
# parameter: user repo branch tag commmit
# if tag=="-" then use commit
github_clone() {
	local old_dir retrys
	[ -d ${TMP_DIR}/repos/$2 ] && rm -rf ${TMP_DIR}/repos/$2
	mkdir ${TMP_DIR}/repos/$2

	retrys=0
	while [ ${retrys} -lt 20 ]; do
		if GIT_SSH_COMMAND="ssh -i ${GITHUB_SSHKEY}" git clone git@github.com:$1/$2.git ${TMP_DIR}/repos/$2; then
			break
		else
			retrys=$(expr ${retrys} + 1)
			# sleep 15
		fi
	done
	[[ ${retrys} -gt 0 && ${retrys} -lt 20 ]] && bot_log w "git-clone" "git clone $1/$2 retried ${retrys} time(s)"
	[ ${retrys} -ge 20 ] && bot_log e "git-clone" "git clone $1/$2 failed after ${retrys} retrys" && return 1
	old_dir=$(pwd)
	cd ${TMP_DIR}/repos/$2
	git switch --quiet $3
	[[ "$4" != "" && "$4" != "-" ]] && git checkout --quiet $4
	[[ "$4" == "-" && "$5" != "" ]] && git checkout --quiet $5
	cd ${old_dir}
}

# github clean locale repo
# parameter: user repo
github_clean() {
	rm -rf ${TMP_DIR}/repos/$2
}


